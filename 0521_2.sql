CREATE TABLE TEACHER(
	TID NUMBER PRIMARY KEY,
	TNAME VARCHAR2(20),
	TSUBJECT VARCHAR2(20)
);

CREATE SEQUENCE T_SEQ;

CREATE TABLE STUDENT(
	SID NUMBER PRIMARY KEY,
	SNAME VARCHAR2(20),
	TID NUMBER,
	FOREIGN KEY(TID) REFERENCES TEACHER(TID)
);

CREATE SEQUENCE S_SEQ;

INSERT INTO TEACHER VALUES(T_SEQ.NEXTVAL,'홍선생','국어');
INSERT INTO TEACHER VALUES(T_SEQ.NEXTVAL,'강선생','영어');
INSERT INTO TEACHER VALUES(T_SEQ.NEXTVAL,'최선생','수학');


SELECT * FROM TEACHER;

INSERT INTO STUDENT VALUES(S_SEQ.NEXTVAL,'김학생',1);
INSERT INTO STUDENT VALUES(S_SEQ.NEXTVAL,'이학생',1);
INSERT INTO STUDENT VALUES(S_SEQ.NEXTVAL,'박학생',1);
INSERT INTO STUDENT VALUES(S_SEQ.NEXTVAL,'유학생',2);
INSERT INTO STUDENT VALUES(S_SEQ.NEXTVAL,'장학생',2);
INSERT INTO STUDENT VALUES(S_SEQ.NEXTVAL,'조학생',3);

SELECT * FROM STUDENT;

--INNER JOIN
--1.오라클

SELECT *
FROM TEACHER T, STUDENT S
WHERE T.TID = S.TID;


--2.ANSI
SELECT *
FROM TEACHER T JOIN STUDENT S
ON T.TID = S.TID;


--OUTER JOIN
--1.오라클
-- LEFT OUTER JOIN (오른쪽 데이터에 매칭되는 데이터가 없어도 왼쪽 데이터는 모두 조회)
SELECT *
FROM TEACHER T, STUDENT S
WHERE T.TID = S.SID(+);

--RIGHT OUTER JOIN(왼쪽 데이터에 매칭되는 데이터가 없어도 오른쪽 데이터는 모두 조회)
SELECT *
FROM TEACHER T, STUDENT S
WHERE T.TID(+) = S.SID;


--2. ANSI

-- LEFT OUTER JOIN (오른쪽 데이터에 매칭되는 데이터가 없어도 왼쪽 데이터는 모두 조회)
SELECT *
FROM TEACHER T LEFT OUTER JOIN STUDENT S
ON T.TID = S.SID;

--RIGHT OUTER JOIN(왼쪽 데이터에 매칭되는 데이터가 없어도 오른쪽 데이터는 모두 조회)
SELECT *
FROM TEACHER T RIGHT OUTER JOIN STUDENT S
ON T.TID = S.SID;

-- FULL OUTER JOIN (매칭되는 데이터가 없어도 양쪽 데이터는 모두 조회)
SELECT *
FROM TEACHER T FULL OUTER JOIN STUDENT S
ON T.TID = S.SID;


INSERT INTO TEACHER VALUES (T_SEQ.NEXTVAL,NULL,NULL);
INSERT INTO STUDENT VALUES (S_SEQ.NEXTVAL,NULL,3);

SELECT * FROM TEACHER;
SELECT * FROM STUDENT;



--3개 이상의 테이블JOIN

CREATE TABLE FRIEND (
	FID NUMBER PRIMARY KEY,
	FNAME VARCHAR2(20),
	SID NUMBER,
	FOREIGN KEY(SID) REFERENCES STUDENT(SID) 
);

CREATE SEQUENCE F_SEQ;

INSERT INTO FRIEND VALUES(F_SEQ.NEXTVAL,'곽친구',7);
INSERT INTO FRIEND VALUES(F_SEQ.NEXTVAL,'왕친구',7);


SELECT * FROM FRIEND;

--3개 INNNER JOIN

SELECT *
FROM TEACHER T, STUDENT S, FRIEND F
WHERE T.TID = S.TID
	AND S.SID = F.SID;


--3개 OUTER JOIN

-- LEFT OUTER JOIN
SELECT *
FROM TEACHER T, STUDENT S, FRIEND F
WHERE T.TID = S.TID(+)
	AND S.SID = F.SID(+);

-- RIGHT OUTER JOIN
SELECT *
FROM TEACHER T, STUDENT S, FRIEND F
WHERE T.TID(+) = S.TID
	AND S.SID(+) = F.SID;


--서브 쿼리 (SUBQUERY) : 메인 쿼리내에서 사용하는 모든 쿼리

--WHERE절에서 단일행 서브쿼리 사용 가능
--WHERE절에 다중행 서브 쿼리는 사용 불가
SELECT *
FROM DEPARTMENTS
WHERE DEPARTMENT_ID = (
	SELECT
	DEPARTMENT_ID 
	FROM EMPLOYEES
	WHERE EMPLOYEE_ID=100
);

-- IN,ANY,SOME,ALL,EXISTS
SELECT *
FROM DEPARTMENTS
WHERE DEPARTMENT_ID  IN(
	SELECT DEPARTMENT_ID 
	FROM EMPLOYEES
	WHERE EMPLOYEE_ID=100
		OR EMPLOYEE_ID = 103
);

SELECT *
FROM DEPARTMENTS
WHERE DEPARTMENT_ID = ALL(
	SELECT DEPARTMENT_ID 
	FROM EMPLOYEES
	WHERE EMPLOYEE_ID=100
		OR EMPLOYEE_ID = 103
);

SELECT *
FROM DEPARTMENTS
WHERE EXISTS( -- TURE나 FALSE로 해석
	SELECT DEPARTMENT_ID 
	FROM EMPLOYEES
	WHERE EMPLOYEE_ID=100
		OR EMPLOYEE_ID = 103
);

-- SELECT구문 서브 쿼리
SELECT 'HELLO', (SELECT'ORACLE'FROM DUAL)
FROM DUAL;

--FROM구문 서브 쿼리
SELECT D.*
FROM (SELECT * FROM DEPARTMENTS)D;






                                                                                                                                              
SELECT *FROM EMPLOYEES;





